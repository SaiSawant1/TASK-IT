// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  password               String?
  email                  String?                  @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  organizationMembership OrganizationMembership[]
  messages               Message[]
}

model OrganizationMembership {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           UserRole     @default(USER)

  @@unique([userId, organizationId])
}

model Organization {
  id       String                   @id @default(cuid())
  name     String
  token    String
  members  OrganizationMembership[]
  messages Message[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Board {
  id            String @id @default(cuid())
  title         String
  orgId         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageUserName String @db.Text
  imageLinkHtml String @db.Text

  lists List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id    String @id @default(cuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String  @id @default(cuid())
  title       String
  order       Int
  description String? @db.Text
  bg          String?

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id          String      @id @default(cuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String      @db.Text
  userName    String      @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organizatio    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([userId])
}

model OrgLimit {
  id    String @id @default(cuid())
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id                     String    @id @default(cuid())
  orgId                  String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
